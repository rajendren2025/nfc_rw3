name: Android CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # <<< CHANGE THIS if your Android project is in a subfolder >>>
      PROJECT_DIR: .   # e.g. "NfcWriterRawOptionB" or "NfcWriterRaw"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # ---- Install Android SDK (with inline PATH export) ----
      - name: Install Android SDK
        run: |
          set -e
          SDK_ROOT=/usr/local/lib/android/sdk
          sudo mkdir -p "$SDK_ROOT/cmdline-tools"
          curl -fo cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          sudo unzip -q cmdtools.zip -d "$SDK_ROOT/cmdline-tools"
          sudo mv "$SDK_ROOT/cmdline-tools/cmdline-tools" "$SDK_ROOT/cmdline-tools/latest"

          # Make sdkmanager available BOTH now (export) and for later steps (GITHUB_PATH)
          export ANDROID_SDK_ROOT="$SDK_ROOT"
          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$SDK_ROOT/platform-tools:$PATH"
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "$SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH

          yes | "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses
          "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --install "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      # ---- Install Gradle (no wrapper in repo) ----
      - name: Install Gradle 8.7
        run: |
          set -e
          curl -s https://get.sdkman.io | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          echo "$HOME/.sdkman/candidates/gradle/current/bin" >> $GITHUB_PATH

      # ---- Build Debug APK ----
      - name: Build Debug APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: gradle assembleDebug

      # ---- Locate APK (any module) ----
      - name: Locate APK
        id: locate_apk
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          APK=$(ls -1 **/outputs/apk/debug/*.apk 2>/dev/null | head -n 1 || true)
          if [ -z "$APK" ]; then
            echo "No debug APK found. Tree for debugging:"; ls -R
            exit 1
          fi
          echo "Found APK: $APK"
          echo "apk_path=$APK" >> "$GITHUB_OUTPUT"

      # ---- Upload artifact ----
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: ${{ steps.locate_apk.outputs.apk_path }}
          if-no-files-found: error
